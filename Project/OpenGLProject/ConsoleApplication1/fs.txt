#version 150

uniform sampler2D tex;
uniform vec3 lightPos;
uniform vec4 lightColor;
uniform mat4 lightViewMatrix;
uniform mat4 lightProjMatrix;
uniform vec3 lightHitheryon;
uniform float doShadow;
uniform sampler2D shadowBuffer;

in vec2 v_texcoord;
in vec3 v_normal;
in vec3 v_worldPos;

out vec4 color;

void main()
{
	vec4 pe = vec4(v_worldPos, 1) *  lightViewMatrix;
    vec4 ps = pe * lightProjMatrix;
    ps = ps/ ps.w;
    vec2 tc = vec2((ps.x + 1)/2,(ps.y + 1)/2);
	float t = texture(shadowBuffer,tc).r;
	t = lightHitheryon.x + (t *  lightHitheryon.y);
	
	bool lit = !(t + 0.010 < -pe.z || -pe.z < 0);
	bvec2 a = lessThan(tc,vec2(0,0));
	bvec2 b = greaterThan(tc,vec2(1.0,1.0));
	lit = lit && !(any(a) || any(b));
	vec2 q = tc - vec2(0.5, 0.5);
	float dis = dot(q,q);
	lit = lit && (dis < 0.25);
	
	color = vec4(0,0,0,1);
	if(lit || doShadow == 0)
	{
		vec3 N = normalize(v_normal);
		vec3 L = normalize(lightPos - v_worldPos);
		float dp = clamp( dot(N,L), 0.0, 1.0 );
		
		color = texture(tex,v_texcoord);
		color.rgb *= dp ;
		color.w = 1;
		
		float pct = 1- smoothstep(0.3,0.5,length(q.xy));
		color *= pct;
	}

}
	