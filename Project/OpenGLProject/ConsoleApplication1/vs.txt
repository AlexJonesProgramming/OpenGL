#version 150

in vec3 a_position;
in vec2 a_texcoord;
in vec3 a_normal;
in float a_boneidx;

out vec2 v_texcoord;
out vec3 v_normal;
out vec3 v_worldPos;

uniform mat4 worldMatrix;
uniform mat4 viewMatrix;
uniform mat4 projMatrix;

uniform sampler2D boneparents;
uniform sampler2D bonematrices;
uniform float frame;

vec4 computePos( vec4 p, int boneidx, float frame ){
    //input: point or vector we're processing
    //input: index of the bone that owns p
    
    //prevent infinite loops (debugging)
    int counter=64;
    
    while( boneidx != -1 ){
        if( counter-- < 0 ){
            return vec4(0,0,0,0);
        }
            
        //texture, indices, mipmap level
        float parent  = texelFetch( boneparents, ivec2(boneidx,0), 0 ).r; 
        
        vec4 row1 = texelFetch( bonematrices, ivec2( frame*4, boneidx),0);
        vec4 row2 = texelFetch( bonematrices, ivec2( frame*4+1, boneidx),0);
        vec4 row3 = texelFetch( bonematrices, ivec2( frame*4+2, boneidx),0);
        vec4 row4 = texelFetch( bonematrices, ivec2( frame*4+3, boneidx),0);
        mat4 M = mat4(row1,row2,row3,row4);
        M=transpose(M);
        p = p * M;
        
        boneidx = int(parent);
    }
    return p;
}


void main(){
    vec4 p = vec4(a_position,1.0);
    
    vec4 p1 = computePos(p,int(a_boneidx),floor(frame));
    vec4 p2 = computePos(p,int(a_boneidx),ceil(frame));
    p = mix(p1,p2,fract(frame));
    p = p * worldMatrix;
    v_worldPos = p.xyz;
    p = p * viewMatrix;
    p = p * projMatrix;
    gl_Position = p;
    v_texcoord = a_texcoord;
    
    vec4 n = vec4(a_normal, 0.0 );
    vec4 n1 = computePos(n,int(a_boneidx),floor(frame));
    vec4 n2 = computePos(n,int(a_boneidx),ceil(frame));
    n = mix(n1,n2,fract(frame));
    n = n * worldMatrix;
    v_normal = n.xyz;
}
