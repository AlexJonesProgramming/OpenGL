#version 150

precision highp float;

uniform sampler2D tex;

uniform vec4 diffusemtl;
//uniform vec4 specmtl;

uniform vec3 eyePos;

in vec2 v_texcoord;
in vec3 v_normal;
in vec3 v_worldPos;


uniform vec3 lightPos;
uniform float roughness;

out vec4 color;

void main(){
	vec4 specmtl = vec4(1.0,1.0,1.0,1.0);
	vec3 lightColor = vec3(1.0,1.0,1.0);
    vec3 N=normalize(v_normal.xyz);
        
    vec3 V = eyePos.xyz - v_worldPos.xyz;
    V=normalize(V);
    
    vec3 diffuse;
    
    vec3 L = lightPos.xyz-v_worldPos.xyz;
    L=normalize(L);
    
    float dp = clamp( dot(L,N) , 0.0, 1.0);
    diffuse = dp*lightColor.rgb;
    
    vec3 specular;
    
	float r=roughness;
	vec3 one = vec3(1.0);
	vec3 H = normalize(0.5*(L+V));
	vec3 sp = min(specmtl.rgb,vec3(0.95));
	vec3 sqrtk = sqrt(sp);
	//do all three channels at once, since
	//sp will be different for r,g,b:
	//So will q, f1,f2,f3,f4, and F
	vec3 n = (-one - sqrtk) / (sqrtk - one);
	vec3 cos_a = vec3(dot(N,V));
	vec3 cos_b = vec3(dot(N,L));
	vec3 cos_c = vec3(dot(V,H));
	vec3 cos_d = vec3(dot(N,H));
	vec3 q = sqrt(cos_c*cos_c - one + n*n);
	vec3 f1 = q - cos_c;
	vec3 f2 = q + cos_c;
	vec3 f3 = (f2 * cos_c)-one;
	vec3 f4 = (f1 * cos_c)+one;
	vec3 Q1 = f1/f2;
	Q1*=Q1;
	vec3 Q2 = f3/f4;
	Q2*=Q2;
	vec3 F=vec3(0.5)*Q1*(vec3(1.0)+Q2);
	float cos2d = cos_d[0]*cos_d[0];
	float t = r*(1.0-1.0/cos2d);
	float M = r*exp(t)/(4.0*cos2d*cos2d);
	float A = clamp(2.0*cos_d[0]*min(cos_a[0],cos_b[0])/cos_c[0],0.0,1.0);
	specular = vec3(M)*F*vec3(A)/(cos_a*cos_b*vec3(3.14159265358979323));
	specular *= sign(dp);

    vec4 texc = texture2D(tex,v_texcoord.st);
    vec4 basecolor;
    basecolor.rgb = diffuse.rgb  * texc.rgb;
    basecolor.rgb += specular.rgb;
    basecolor.a = texc.a;
    color = basecolor;
    
}